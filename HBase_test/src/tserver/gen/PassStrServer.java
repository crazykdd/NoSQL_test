/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tserver.gen;

import java.io.IOException;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PassStrServer
{

	public interface Iface
	{

		public int passStr(String st) throws org.apache.thrift.TException,
				Exception;

		public List<List<kvPair>> querry(String attribute, String value)
				throws org.apache.thrift.TException, IOException;

		public int connectDatabase(List<String> paras)
				throws org.apache.thrift.TException, IOException;

	}

	public interface AsyncIface
	{

		public void passStr(
				String st,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.passStr_call> resultHandler)
				throws org.apache.thrift.TException;

		public void querry(
				String attribute,
				String value,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.querry_call> resultHandler)
				throws org.apache.thrift.TException;

		public void connectDatabase(
				List<String> paras,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.connectDatabase_call> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements Iface
	{
		public static class Factory implements
				org.apache.thrift.TServiceClientFactory<Client>
		{
			public Factory()
			{}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot)
			{
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot)
			{
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot)
		{
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot)
		{
			super(iprot, oprot);
		}

		public int passStr(String st) throws org.apache.thrift.TException
		{
			send_passStr(st);
			return recv_passStr();
		}

		public void send_passStr(String st) throws org.apache.thrift.TException
		{
			passStr_args args = new passStr_args();
			args.setSt(st);
			sendBase("passStr", args);
		}

		public int recv_passStr() throws org.apache.thrift.TException
		{
			passStr_result result = new passStr_result();
			receiveBase(result, "passStr");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"passStr failed: unknown result");
		}

		public List<List<kvPair>> querry(String attribute, String value)
				throws org.apache.thrift.TException
		{
			send_querry(attribute, value);
			return recv_querry();
		}

		public void send_querry(String attribute, String value)
				throws org.apache.thrift.TException
		{
			querry_args args = new querry_args();
			args.setAttribute(attribute);
			args.setValue(value);
			sendBase("querry", args);
		}

		public List<List<kvPair>> recv_querry()
				throws org.apache.thrift.TException
		{
			querry_result result = new querry_result();
			receiveBase(result, "querry");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"querry failed: unknown result");
		}

		public int connectDatabase(List<String> paras)
				throws org.apache.thrift.TException
		{
			send_connectDatabase(paras);
			return recv_connectDatabase();
		}

		public void send_connectDatabase(List<String> paras)
				throws org.apache.thrift.TException
		{
			connectDatabase_args args = new connectDatabase_args();
			args.setParas(paras);
			sendBase("connectDatabase", args);
		}

		public int recv_connectDatabase() throws org.apache.thrift.TException
		{
			connectDatabase_result result = new connectDatabase_result();
			receiveBase(result, "connectDatabase");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"connectDatabase failed: unknown result");
		}

	}

	public static class AsyncClient extends
			org.apache.thrift.async.TAsyncClient implements AsyncIface
	{
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient>
		{
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory)
			{
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport)
			{
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport)
		{
			super(protocolFactory, clientManager, transport);
		}

		public void passStr(
				String st,
				org.apache.thrift.async.AsyncMethodCallback<passStr_call> resultHandler)
				throws org.apache.thrift.TException
		{
			checkReady();
			passStr_call method_call = new passStr_call(st, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class passStr_call extends
				org.apache.thrift.async.TAsyncMethodCall
		{
			private String st;

			public passStr_call(
					String st,
					org.apache.thrift.async.AsyncMethodCallback<passStr_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
				this.st = st;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"passStr",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				passStr_args args = new passStr_args();
				args.setSt(st);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_passStr();
			}
		}

		public void querry(
				String attribute,
				String value,
				org.apache.thrift.async.AsyncMethodCallback<querry_call> resultHandler)
				throws org.apache.thrift.TException
		{
			checkReady();
			querry_call method_call = new querry_call(attribute, value,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class querry_call extends
				org.apache.thrift.async.TAsyncMethodCall
		{
			private String attribute;
			private String value;

			public querry_call(
					String attribute,
					String value,
					org.apache.thrift.async.AsyncMethodCallback<querry_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
				this.attribute = attribute;
				this.value = value;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"querry", org.apache.thrift.protocol.TMessageType.CALL,
						0));
				querry_args args = new querry_args();
				args.setAttribute(attribute);
				args.setValue(value);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<List<kvPair>> getResult()
					throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_querry();
			}
		}

		public void connectDatabase(
				List<String> paras,
				org.apache.thrift.async.AsyncMethodCallback<connectDatabase_call> resultHandler)
				throws org.apache.thrift.TException
		{
			checkReady();
			connectDatabase_call method_call = new connectDatabase_call(paras,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class connectDatabase_call extends
				org.apache.thrift.async.TAsyncMethodCall
		{
			private List<String> paras;

			public connectDatabase_call(
					List<String> paras,
					org.apache.thrift.async.AsyncMethodCallback<connectDatabase_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
				this.paras = paras;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"connectDatabase",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				connectDatabase_args args = new connectDatabase_args();
				args.setParas(paras);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_connectDatabase();
			}
		}

	}

	public static class Processor<I extends Iface> extends
			org.apache.thrift.TBaseProcessor<I> implements
			org.apache.thrift.TProcessor
	{
		private static final Logger LOGGER = LoggerFactory
				.getLogger(Processor.class.getName());

		public Processor(I iface)
		{
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
		{
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
		{
			processMap.put("passStr", new passStr());
			processMap.put("querry", new querry());
			processMap.put("connectDatabase", new connectDatabase());
			return processMap;
		}

		public static class passStr<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, passStr_args>
		{
			public passStr()
			{
				super("passStr");
			}

			public passStr_args getEmptyArgsInstance()
			{
				return new passStr_args();
			}

			protected boolean isOneway()
			{
				return false;
			}

			public passStr_result getResult(I iface, passStr_args args)
					throws org.apache.thrift.TException
			{
				passStr_result result = new passStr_result();
				try
				{
					result.success = iface.passStr(args.st);
				}
				catch (Exception e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class querry<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, querry_args>
		{
			public querry()
			{
				super("querry");
			}

			public querry_args getEmptyArgsInstance()
			{
				return new querry_args();
			}

			protected boolean isOneway()
			{
				return false;
			}

			public querry_result getResult(I iface, querry_args args)
					throws org.apache.thrift.TException
			{
				querry_result result = new querry_result();
				try
				{
					result.success = iface.querry(args.attribute, args.value);
				}
				catch (IOException e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return result;
			}
		}

		public static class connectDatabase<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, connectDatabase_args>
		{
			public connectDatabase()
			{
				super("connectDatabase");
			}

			public connectDatabase_args getEmptyArgsInstance()
			{
				return new connectDatabase_args();
			}

			protected boolean isOneway()
			{
				return false;
			}

			public connectDatabase_result getResult(I iface,
					connectDatabase_args args)
					throws org.apache.thrift.TException
			{
				connectDatabase_result result = new connectDatabase_result();
				try
				{
					result.success = iface.connectDatabase(args.paras);
				}
				catch (IOException e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				result.setSuccessIsSet(true);
				return result;
			}
		}

	}

	public static class passStr_args implements
			org.apache.thrift.TBase<passStr_args, passStr_args._Fields>,
			java.io.Serializable, Cloneable
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"passStr_args");

		private static final org.apache.thrift.protocol.TField ST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"st", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new passStr_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new passStr_argsTupleSchemeFactory());
		}

		public String st; // required

		/** The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			ST((short) 1, "st");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/** Find the _Fields constant that matches fieldId, or null if its
			 * not found. */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
				case 1: // ST
					return ST;
				default:
					return null;
				}
			}

			/** Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found. */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/** Find the _Fields constant that matches name, or null if its not
			 * found. */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ST,
					new org.apache.thrift.meta_data.FieldMetaData("st",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING,
									"String")));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					passStr_args.class, metaDataMap);
		}

		public passStr_args()
		{}

		public passStr_args(String st)
		{
			this();
			this.st = st;
		}

		/** Performs a deep copy on <i>other</i>. */
		public passStr_args(passStr_args other)
		{
			if (other.isSetSt())
			{
				this.st = other.st;
			}
		}

		public passStr_args deepCopy()
		{
			return new passStr_args(this);
		}

		@Override
		public void clear()
		{
			this.st = null;
		}

		public String getSt()
		{
			return this.st;
		}

		public passStr_args setSt(String st)
		{
			this.st = st;
			return this;
		}

		public void unsetSt()
		{
			this.st = null;
		}

		/** Returns true if field st is set (has been assigned a value) and false
		 * otherwise */
		public boolean isSetSt()
		{
			return this.st != null;
		}

		public void setStIsSet(boolean value)
		{
			if (!value)
			{
				this.st = null;
			}
		}

		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			case ST:
				if (value == null)
				{
					unsetSt();
				}
				else
				{
					setSt((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			case ST:
				return getSt();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			case ST:
				return isSetSt();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof passStr_args)
				return this.equals((passStr_args) that);
			return false;
		}

		public boolean equals(passStr_args that)
		{
			if (that == null)
				return false;

			boolean this_present_st = true && this.isSetSt();
			boolean that_present_st = true && that.isSetSt();
			if (this_present_st || that_present_st)
			{
				if (!(this_present_st && that_present_st))
					return false;
				if (!this.st.equals(that.st))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			return 0;
		}

		public int compareTo(passStr_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			passStr_args typedOther = (passStr_args) other;

			lastComparison = Boolean.valueOf(isSetSt()).compareTo(
					typedOther.isSetSt());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSt())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.st, typedOther.st);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("passStr_args(");
			boolean first = true;

			sb.append("st:");
			if (this.st == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.st);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class passStr_argsStandardSchemeFactory implements
				SchemeFactory
		{
			public passStr_argsStandardScheme getScheme()
			{
				return new passStr_argsStandardScheme();
			}
		}

		private static class passStr_argsStandardScheme extends
				StandardScheme<passStr_args>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					passStr_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
					case 1: // ST
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
						{
							struct.st = iprot.readString();
							struct.setStIsSet(true);
						}
						else
						{
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					passStr_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.st != null)
				{
					oprot.writeFieldBegin(ST_FIELD_DESC);
					oprot.writeString(struct.st);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class passStr_argsTupleSchemeFactory implements
				SchemeFactory
		{
			public passStr_argsTupleScheme getScheme()
			{
				return new passStr_argsTupleScheme();
			}
		}

		private static class passStr_argsTupleScheme extends
				TupleScheme<passStr_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					passStr_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSt())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSt())
				{
					oprot.writeString(struct.st);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					passStr_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					struct.st = iprot.readString();
					struct.setStIsSet(true);
				}
			}
		}

	}

	public static class passStr_result implements
			org.apache.thrift.TBase<passStr_result, passStr_result._Fields>,
			java.io.Serializable, Cloneable
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"passStr_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new passStr_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new passStr_resultTupleSchemeFactory());
		}

		public int success; // required

		/** The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/** Find the _Fields constant that matches fieldId, or null if its
			 * not found. */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/** Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found. */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/** Find the _Fields constant that matches name, or null if its not
			 * found. */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32, "int")));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					passStr_result.class, metaDataMap);
		}

		public passStr_result()
		{}

		public passStr_result(int success)
		{
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/** Performs a deep copy on <i>other</i>. */
		public passStr_result(passStr_result other)
		{
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public passStr_result deepCopy()
		{
			return new passStr_result(this);
		}

		@Override
		public void clear()
		{
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess()
		{
			return this.success;
		}

		public passStr_result setSuccess(int success)
		{
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess()
		{
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/** Returns true if field success is set (has been assigned a value) and
		 * false otherwise */
		public boolean isSetSuccess()
		{
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value)
		{
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			case SUCCESS:
				if (value == null)
				{
					unsetSuccess();
				}
				else
				{
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			case SUCCESS:
				return Integer.valueOf(getSuccess());

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof passStr_result)
				return this.equals((passStr_result) that);
			return false;
		}

		public boolean equals(passStr_result that)
		{
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			return 0;
		}

		public int compareTo(passStr_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			passStr_result typedOther = (passStr_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("passStr_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class passStr_resultStandardSchemeFactory implements
				SchemeFactory
		{
			public passStr_resultStandardScheme getScheme()
			{
				return new passStr_resultStandardScheme();
			}
		}

		private static class passStr_resultStandardScheme extends
				StandardScheme<passStr_result>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					passStr_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32)
						{
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						}
						else
						{
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					passStr_result struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess())
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class passStr_resultTupleSchemeFactory implements
				SchemeFactory
		{
			public passStr_resultTupleScheme getScheme()
			{
				return new passStr_resultTupleScheme();
			}
		}

		private static class passStr_resultTupleScheme extends
				TupleScheme<passStr_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					passStr_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess())
				{
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					passStr_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class querry_args implements
			org.apache.thrift.TBase<querry_args, querry_args._Fields>,
			java.io.Serializable, Cloneable
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"querry_args");

		private static final org.apache.thrift.protocol.TField ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"attribute", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"value", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new querry_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new querry_argsTupleSchemeFactory());
		}

		public String attribute; // required
		public String value; // required

		/** The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			ATTRIBUTE((short) 1, "attribute"), VALUE((short) 2, "value");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/** Find the _Fields constant that matches fieldId, or null if its
			 * not found. */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
				case 1: // ATTRIBUTE
					return ATTRIBUTE;
				case 2: // VALUE
					return VALUE;
				default:
					return null;
				}
			}

			/** Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found. */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/** Find the _Fields constant that matches name, or null if its not
			 * found. */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ATTRIBUTE,
					new org.apache.thrift.meta_data.FieldMetaData("attribute",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING,
									"String")));
			tmpMap.put(_Fields.VALUE,
					new org.apache.thrift.meta_data.FieldMetaData("value",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING,
									"String")));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					querry_args.class, metaDataMap);
		}

		public querry_args()
		{}

		public querry_args(String attribute, String value)
		{
			this();
			this.attribute = attribute;
			this.value = value;
		}

		/** Performs a deep copy on <i>other</i>. */
		public querry_args(querry_args other)
		{
			if (other.isSetAttribute())
			{
				this.attribute = other.attribute;
			}
			if (other.isSetValue())
			{
				this.value = other.value;
			}
		}

		public querry_args deepCopy()
		{
			return new querry_args(this);
		}

		@Override
		public void clear()
		{
			this.attribute = null;
			this.value = null;
		}

		public String getAttribute()
		{
			return this.attribute;
		}

		public querry_args setAttribute(String attribute)
		{
			this.attribute = attribute;
			return this;
		}

		public void unsetAttribute()
		{
			this.attribute = null;
		}

		/** Returns true if field attribute is set (has been assigned a value)
		 * and false otherwise */
		public boolean isSetAttribute()
		{
			return this.attribute != null;
		}

		public void setAttributeIsSet(boolean value)
		{
			if (!value)
			{
				this.attribute = null;
			}
		}

		public String getValue()
		{
			return this.value;
		}

		public querry_args setValue(String value)
		{
			this.value = value;
			return this;
		}

		public void unsetValue()
		{
			this.value = null;
		}

		/** Returns true if field value is set (has been assigned a value) and
		 * false otherwise */
		public boolean isSetValue()
		{
			return this.value != null;
		}

		public void setValueIsSet(boolean value)
		{
			if (!value)
			{
				this.value = null;
			}
		}

		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			case ATTRIBUTE:
				if (value == null)
				{
					unsetAttribute();
				}
				else
				{
					setAttribute((String) value);
				}
				break;

			case VALUE:
				if (value == null)
				{
					unsetValue();
				}
				else
				{
					setValue((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			case ATTRIBUTE:
				return getAttribute();

			case VALUE:
				return getValue();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			case ATTRIBUTE:
				return isSetAttribute();
			case VALUE:
				return isSetValue();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof querry_args)
				return this.equals((querry_args) that);
			return false;
		}

		public boolean equals(querry_args that)
		{
			if (that == null)
				return false;

			boolean this_present_attribute = true && this.isSetAttribute();
			boolean that_present_attribute = true && that.isSetAttribute();
			if (this_present_attribute || that_present_attribute)
			{
				if (!(this_present_attribute && that_present_attribute))
					return false;
				if (!this.attribute.equals(that.attribute))
					return false;
			}

			boolean this_present_value = true && this.isSetValue();
			boolean that_present_value = true && that.isSetValue();
			if (this_present_value || that_present_value)
			{
				if (!(this_present_value && that_present_value))
					return false;
				if (!this.value.equals(that.value))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			return 0;
		}

		public int compareTo(querry_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			querry_args typedOther = (querry_args) other;

			lastComparison = Boolean.valueOf(isSetAttribute()).compareTo(
					typedOther.isSetAttribute());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetAttribute())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.attribute, typedOther.attribute);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetValue()).compareTo(
					typedOther.isSetValue());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetValue())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.value, typedOther.value);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("querry_args(");
			boolean first = true;

			sb.append("attribute:");
			if (this.attribute == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.attribute);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("value:");
			if (this.value == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.value);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class querry_argsStandardSchemeFactory implements
				SchemeFactory
		{
			public querry_argsStandardScheme getScheme()
			{
				return new querry_argsStandardScheme();
			}
		}

		private static class querry_argsStandardScheme extends
				StandardScheme<querry_args>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					querry_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
					case 1: // ATTRIBUTE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
						{
							struct.attribute = iprot.readString();
							struct.setAttributeIsSet(true);
						}
						else
						{
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // VALUE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
						{
							struct.value = iprot.readString();
							struct.setValueIsSet(true);
						}
						else
						{
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					querry_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.attribute != null)
				{
					oprot.writeFieldBegin(ATTRIBUTE_FIELD_DESC);
					oprot.writeString(struct.attribute);
					oprot.writeFieldEnd();
				}
				if (struct.value != null)
				{
					oprot.writeFieldBegin(VALUE_FIELD_DESC);
					oprot.writeString(struct.value);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class querry_argsTupleSchemeFactory implements
				SchemeFactory
		{
			public querry_argsTupleScheme getScheme()
			{
				return new querry_argsTupleScheme();
			}
		}

		private static class querry_argsTupleScheme extends
				TupleScheme<querry_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					querry_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetAttribute())
				{
					optionals.set(0);
				}
				if (struct.isSetValue())
				{
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetAttribute())
				{
					oprot.writeString(struct.attribute);
				}
				if (struct.isSetValue())
				{
					oprot.writeString(struct.value);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					querry_args struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0))
				{
					struct.attribute = iprot.readString();
					struct.setAttributeIsSet(true);
				}
				if (incoming.get(1))
				{
					struct.value = iprot.readString();
					struct.setValueIsSet(true);
				}
			}
		}

	}

	public static class querry_result implements
			org.apache.thrift.TBase<querry_result, querry_result._Fields>,
			java.io.Serializable, Cloneable
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"querry_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new querry_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new querry_resultTupleSchemeFactory());
		}

		public List<List<kvPair>> success; // required

		/** The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/** Find the _Fields constant that matches fieldId, or null if its
			 * not found. */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/** Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found. */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/** Find the _Fields constant that matches name, or null if its not
			 * found. */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.ListMetaData(
											org.apache.thrift.protocol.TType.LIST,
											new org.apache.thrift.meta_data.StructMetaData(
													org.apache.thrift.protocol.TType.STRUCT,
													kvPair.class)))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					querry_result.class, metaDataMap);
		}

		public querry_result()
		{}

		public querry_result(List<List<kvPair>> success)
		{
			this();
			this.success = success;
		}

		/** Performs a deep copy on <i>other</i>. */
		public querry_result(querry_result other)
		{
			if (other.isSetSuccess())
			{
				List<List<kvPair>> __this__success = new ArrayList<List<kvPair>>();
				for (List<kvPair> other_element : other.success)
				{
					List<kvPair> __this__success_copy = new ArrayList<kvPair>();
					for (kvPair other_element_element : other_element)
					{
						__this__success_copy.add(new kvPair(
								other_element_element));
					}
					__this__success.add(__this__success_copy);
				}
				this.success = __this__success;
			}
		}

		public querry_result deepCopy()
		{
			return new querry_result(this);
		}

		@Override
		public void clear()
		{
			this.success = null;
		}

		public int getSuccessSize()
		{
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<List<kvPair>> getSuccessIterator()
		{
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(List<kvPair> elem)
		{
			if (this.success == null)
			{
				this.success = new ArrayList<List<kvPair>>();
			}
			this.success.add(elem);
		}

		public List<List<kvPair>> getSuccess()
		{
			return this.success;
		}

		public querry_result setSuccess(List<List<kvPair>> success)
		{
			this.success = success;
			return this;
		}

		public void unsetSuccess()
		{
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and
		 * false otherwise */
		public boolean isSetSuccess()
		{
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value)
		{
			if (!value)
			{
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			case SUCCESS:
				if (value == null)
				{
					unsetSuccess();
				}
				else
				{
					setSuccess((List<List<kvPair>>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof querry_result)
				return this.equals((querry_result) that);
			return false;
		}

		public boolean equals(querry_result that)
		{
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			return 0;
		}

		public int compareTo(querry_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			querry_result typedOther = (querry_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("querry_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class querry_resultStandardSchemeFactory implements
				SchemeFactory
		{
			public querry_resultStandardScheme getScheme()
			{
				return new querry_resultStandardScheme();
			}
		}

		private static class querry_resultStandardScheme extends
				StandardScheme<querry_result>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					querry_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
						{
							{
								org.apache.thrift.protocol.TList _list0 = iprot
										.readListBegin();
								struct.success = new ArrayList<List<kvPair>>(
										_list0.size);
								for (int _i1 = 0; _i1 < _list0.size; ++_i1)
								{
									List<kvPair> _elem2; // required
									{
										org.apache.thrift.protocol.TList _list3 = iprot
												.readListBegin();
										_elem2 = new ArrayList<kvPair>(
												_list3.size);
										for (int _i4 = 0; _i4 < _list3.size; ++_i4)
										{
											kvPair _elem5; // required
											_elem5 = new kvPair();
											_elem5.read(iprot);
											_elem2.add(_elem5);
										}
										iprot.readListEnd();
									}
									struct.success.add(_elem2);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else
						{
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					querry_result struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null)
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.LIST,
								struct.success.size()));
						for (List<kvPair> _iter6 : struct.success)
						{
							{
								oprot.writeListBegin(new org.apache.thrift.protocol.TList(
										org.apache.thrift.protocol.TType.STRUCT,
										_iter6.size()));
								for (kvPair _iter7 : _iter6)
								{
									_iter7.write(oprot);
								}
								oprot.writeListEnd();
							}
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class querry_resultTupleSchemeFactory implements
				SchemeFactory
		{
			public querry_resultTupleScheme getScheme()
			{
				return new querry_resultTupleScheme();
			}
		}

		private static class querry_resultTupleScheme extends
				TupleScheme<querry_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					querry_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess())
				{
					{
						oprot.writeI32(struct.success.size());
						for (List<kvPair> _iter8 : struct.success)
						{
							{
								oprot.writeI32(_iter8.size());
								for (kvPair _iter9 : _iter8)
								{
									_iter9.write(oprot);
								}
							}
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					querry_result struct) throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					{
						org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.LIST,
								iprot.readI32());
						struct.success = new ArrayList<List<kvPair>>(
								_list10.size);
						for (int _i11 = 0; _i11 < _list10.size; ++_i11)
						{
							List<kvPair> _elem12; // required
							{
								org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
										org.apache.thrift.protocol.TType.STRUCT,
										iprot.readI32());
								_elem12 = new ArrayList<kvPair>(_list13.size);
								for (int _i14 = 0; _i14 < _list13.size; ++_i14)
								{
									kvPair _elem15; // required
									_elem15 = new kvPair();
									_elem15.read(iprot);
									_elem12.add(_elem15);
								}
							}
							struct.success.add(_elem12);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class connectDatabase_args
			implements
			org.apache.thrift.TBase<connectDatabase_args, connectDatabase_args._Fields>,
			java.io.Serializable, Cloneable
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"connectDatabase_args");

		private static final org.apache.thrift.protocol.TField PARAS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"paras", org.apache.thrift.protocol.TType.LIST, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new connectDatabase_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new connectDatabase_argsTupleSchemeFactory());
		}

		public List<String> paras; // required

		/** The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			PARAS((short) 1, "paras");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/** Find the _Fields constant that matches fieldId, or null if its
			 * not found. */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
				case 1: // PARAS
					return PARAS;
				default:
					return null;
				}
			}

			/** Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found. */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/** Find the _Fields constant that matches name, or null if its not
			 * found. */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.PARAS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"paras",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					connectDatabase_args.class, metaDataMap);
		}

		public connectDatabase_args()
		{}

		public connectDatabase_args(List<String> paras)
		{
			this();
			this.paras = paras;
		}

		/** Performs a deep copy on <i>other</i>. */
		public connectDatabase_args(connectDatabase_args other)
		{
			if (other.isSetParas())
			{
				List<String> __this__paras = new ArrayList<String>();
				for (String other_element : other.paras)
				{
					__this__paras.add(other_element);
				}
				this.paras = __this__paras;
			}
		}

		public connectDatabase_args deepCopy()
		{
			return new connectDatabase_args(this);
		}

		@Override
		public void clear()
		{
			this.paras = null;
		}

		public int getParasSize()
		{
			return (this.paras == null) ? 0 : this.paras.size();
		}

		public java.util.Iterator<String> getParasIterator()
		{
			return (this.paras == null) ? null : this.paras.iterator();
		}

		public void addToParas(String elem)
		{
			if (this.paras == null)
			{
				this.paras = new ArrayList<String>();
			}
			this.paras.add(elem);
		}

		public List<String> getParas()
		{
			return this.paras;
		}

		public connectDatabase_args setParas(List<String> paras)
		{
			this.paras = paras;
			return this;
		}

		public void unsetParas()
		{
			this.paras = null;
		}

		/** Returns true if field paras is set (has been assigned a value) and
		 * false otherwise */
		public boolean isSetParas()
		{
			return this.paras != null;
		}

		public void setParasIsSet(boolean value)
		{
			if (!value)
			{
				this.paras = null;
			}
		}

		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			case PARAS:
				if (value == null)
				{
					unsetParas();
				}
				else
				{
					setParas((List<String>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			case PARAS:
				return getParas();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			case PARAS:
				return isSetParas();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof connectDatabase_args)
				return this.equals((connectDatabase_args) that);
			return false;
		}

		public boolean equals(connectDatabase_args that)
		{
			if (that == null)
				return false;

			boolean this_present_paras = true && this.isSetParas();
			boolean that_present_paras = true && that.isSetParas();
			if (this_present_paras || that_present_paras)
			{
				if (!(this_present_paras && that_present_paras))
					return false;
				if (!this.paras.equals(that.paras))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			return 0;
		}

		public int compareTo(connectDatabase_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			connectDatabase_args typedOther = (connectDatabase_args) other;

			lastComparison = Boolean.valueOf(isSetParas()).compareTo(
					typedOther.isSetParas());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetParas())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.paras, typedOther.paras);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("connectDatabase_args(");
			boolean first = true;

			sb.append("paras:");
			if (this.paras == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.paras);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class connectDatabase_argsStandardSchemeFactory
				implements SchemeFactory
		{
			public connectDatabase_argsStandardScheme getScheme()
			{
				return new connectDatabase_argsStandardScheme();
			}
		}

		private static class connectDatabase_argsStandardScheme extends
				StandardScheme<connectDatabase_args>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					connectDatabase_args struct)
					throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
					case 1: // PARAS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
						{
							{
								org.apache.thrift.protocol.TList _list16 = iprot
										.readListBegin();
								struct.paras = new ArrayList<String>(
										_list16.size);
								for (int _i17 = 0; _i17 < _list16.size; ++_i17)
								{
									String _elem18; // required
									_elem18 = iprot.readString();
									struct.paras.add(_elem18);
								}
								iprot.readListEnd();
							}
							struct.setParasIsSet(true);
						}
						else
						{
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					connectDatabase_args struct)
					throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.paras != null)
				{
					oprot.writeFieldBegin(PARAS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING,
								struct.paras.size()));
						for (String _iter19 : struct.paras)
						{
							oprot.writeString(_iter19);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class connectDatabase_argsTupleSchemeFactory implements
				SchemeFactory
		{
			public connectDatabase_argsTupleScheme getScheme()
			{
				return new connectDatabase_argsTupleScheme();
			}
		}

		private static class connectDatabase_argsTupleScheme extends
				TupleScheme<connectDatabase_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					connectDatabase_args struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParas())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParas())
				{
					{
						oprot.writeI32(struct.paras.size());
						for (String _iter20 : struct.paras)
						{
							oprot.writeString(_iter20);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					connectDatabase_args struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					{
						org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING,
								iprot.readI32());
						struct.paras = new ArrayList<String>(_list21.size);
						for (int _i22 = 0; _i22 < _list21.size; ++_i22)
						{
							String _elem23; // required
							_elem23 = iprot.readString();
							struct.paras.add(_elem23);
						}
					}
					struct.setParasIsSet(true);
				}
			}
		}

	}

	public static class connectDatabase_result
			implements
			org.apache.thrift.TBase<connectDatabase_result, connectDatabase_result._Fields>,
			java.io.Serializable, Cloneable
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"connectDatabase_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static
		{
			schemes.put(StandardScheme.class,
					new connectDatabase_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new connectDatabase_resultTupleSchemeFactory());
		}

		public int success; // required

		/** The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static
			{
				for (_Fields field : EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/** Find the _Fields constant that matches fieldId, or null if its
			 * not found. */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/** Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found. */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/** Find the _Fields constant that matches name, or null if its not
			 * found. */
			public static _Fields findByName(String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static
		{
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32, "int")));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					connectDatabase_result.class, metaDataMap);
		}

		public connectDatabase_result()
		{}

		public connectDatabase_result(int success)
		{
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/** Performs a deep copy on <i>other</i>. */
		public connectDatabase_result(connectDatabase_result other)
		{
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public connectDatabase_result deepCopy()
		{
			return new connectDatabase_result(this);
		}

		@Override
		public void clear()
		{
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess()
		{
			return this.success;
		}

		public connectDatabase_result setSuccess(int success)
		{
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess()
		{
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/** Returns true if field success is set (has been assigned a value) and
		 * false otherwise */
		public boolean isSetSuccess()
		{
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value)
		{
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value)
		{
			switch (field)
			{
			case SUCCESS:
				if (value == null)
				{
					unsetSuccess();
				}
				else
				{
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			case SUCCESS:
				return Integer.valueOf(getSuccess());

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new IllegalArgumentException();
			}

			switch (field)
			{
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that)
		{
			if (that == null)
				return false;
			if (that instanceof connectDatabase_result)
				return this.equals((connectDatabase_result) that);
			return false;
		}

		public boolean equals(connectDatabase_result that)
		{
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			return 0;
		}

		public int compareTo(connectDatabase_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			connectDatabase_result typedOther = (connectDatabase_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException
		{
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException
		{
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString()
		{
			StringBuilder sb = new StringBuilder("connectDatabase_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException
		{
			try
			{
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class connectDatabase_resultStandardSchemeFactory
				implements SchemeFactory
		{
			public connectDatabase_resultStandardScheme getScheme()
			{
				return new connectDatabase_resultStandardScheme();
			}
		}

		private static class connectDatabase_resultStandardScheme extends
				StandardScheme<connectDatabase_result>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					connectDatabase_result struct)
					throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32)
						{
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						}
						else
						{
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					connectDatabase_result struct)
					throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess())
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class connectDatabase_resultTupleSchemeFactory implements
				SchemeFactory
		{
			public connectDatabase_resultTupleScheme getScheme()
			{
				return new connectDatabase_resultTupleScheme();
			}
		}

		private static class connectDatabase_resultTupleScheme extends
				TupleScheme<connectDatabase_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					connectDatabase_result struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess())
				{
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					connectDatabase_result struct)
					throws org.apache.thrift.TException
			{
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
